// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domains "training-partner/internal/domains"

	mock "github.com/stretchr/testify/mock"
)

// ExerciseRepository is an autogenerated mock type for the ExerciseRepository type
type ExerciseRepository struct {
	mock.Mock
}

// FindById provides a mock function with given fields: id
func (_m *ExerciseRepository) FindById(id int) (*domains.Exercise, error) {
	ret := _m.Called(id)

	var r0 *domains.Exercise
	if rf, ok := ret.Get(0).(func(int) *domains.Exercise); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.Exercise)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *ExerciseRepository) GetAll() ([]*domains.Exercise, error) {
	ret := _m.Called()

	var r0 []*domains.Exercise
	if rf, ok := ret.Get(0).(func() []*domains.Exercise); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domains.Exercise)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewExerciseRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewExerciseRepository creates a new instance of ExerciseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExerciseRepository(t mockConstructorTestingTNewExerciseRepository) *ExerciseRepository {
	mock := &ExerciseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
